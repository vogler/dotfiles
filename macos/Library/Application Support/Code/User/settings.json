// Place your settings in this file to overwrite the default settings
{
  "files.associations": {
    "*.pml": "c"
  },
  "files.exclude": {
    "**/.gtm": true,
    "**/.classpath": true,
    "**/.project": true,
    "**/.settings": true,
    "**/.factorypath": true
  },
  "files.insertFinalNewline": true,
  "files.trimFinalNewlines": true,
  "files.trimTrailingWhitespace": true,
  "editor.renderFinalNewline": "off", // seems to have no effect?
  "editor.wordWrap": "on",
  // "editor.cursorStyle": "block-outline",
  "editor.cursorBlinking": "solid",
  "extensions.autoUpdate": true,
  "workbench.quickOpen.closeOnFocusLost": false,
  "workbench.statusBar.visible": true,
  "files.hotExit": "onExitAndWindowClose",
  "window.restoreWindows": "all",
  // "editor.formatOnPaste": false,
  // "editor.formatOnType": false,
  "typescript.referencesCodeLens.enabled": true,
  "json.schemas": [
    {
      "fileMatch": [
        "manifest.json"
      ],
      "url": "http://json.schemastore.org/chrome-manifest"
    },
    {
      "fileMatch": [
        "package.json"
      ],
      "url": "http://json.schemastore.org/package"
    }
  ],
  // "editor.dragAndDrop": true,
  "window.title": "${rootPath}${separator}${activeEditorMedium}",
  "workbench.editor.tabCloseButton": "off",
  "git.confirmSync": false,
  "editor.selectionHighlight": true,
  // "latex-workshop.linter": true,
  // @sync os=windows
  "vim.useCtrlKeys": true, // want true on macOS, false on Windows...
  "vim.leader": ",",
  "vim.useSystemClipboard": true,
  "vim.overrideCopy": false, // otherwise cmd-c doesn't copy
  "vim.highlightedyank.enable": true,
  "vim.handleKeys": {
    // "<C-d>": false,
    "<C-a>": false,
    "<C-e>": false, // don't use scroll down as much as readline's home/end
  },
  "vim.changeWordIncludesWhitespace": true,
  // vim.surround: d s <existing char>, c s <existing char> <desired char>, y s <motion> <desired char>, S <desired char> (visual mode)
  // vim-indent-object: <op>ii this indentation level, <op>ai ..and line above, <op>aI ..and line after
  "vim.camelCaseMotion.enable": true,
  "vim.easymotion": true,
  "vim.normalModeKeyBindingsNonRecursive": [
    {
        "before": [":"],
        "commands": [
            "workbench.action.showCommands",
        ]
    }
  ],
  "editor.renderControlCharacters": false,
  "editor.tabSize": 2,
  "editor.detectIndentation": false,
  "editor.fontSize": 16,
  "editor.autoClosingBrackets": "languageDefined",
  "editor.minimap.showSlider": "always",
  // "gitlens.stashExplorer.enabled": true,
  // "gitlens.blame.line.enabled": false,
  // "gitlens.codeLens.enabled": false,
  // "gitlens.stashExplorer.enabled": false,
  "git.enableSmartCommit": true,
  "terminal.integrated.fontSize": 16,
  "search.useIgnoreFiles": true,
  "explorer.confirmDelete": false,
  "search.smartCase": true,
  "terminal.integrated.macOptionIsMeta": true,
  "git.autofetch": true,
  "diffEditor.ignoreTrimWhitespace": false,
  "latex-workshop.message.update.show": false,
  "workbench.colorTheme": "One Dark Pro Darker",
  // default terminal colors looked ugly in vim
  // https://glitchbone.github.io/vscode-base16-term/#/onedark
  // used the above and changed terminal.ansiBrightBlack (vim background)
  "workbench.colorCustomizations": {
    "terminal.selectionBackground": "#ffff0044",
    "terminal.background":"#282C34",
    "terminal.foreground":"#ABB2BF",
    "terminalCursor.background":"#ABB2BF",
    "terminalCursor.foreground":"#ABB2BF",
    "terminal.ansiBlack":"#282C34",
    "terminal.ansiBlue":"#61AFEF",
    "terminal.ansiBrightBlack":"#21252b",
    "terminal.ansiBrightBlue":"#61AFEF",
    "terminal.ansiBrightCyan":"#56B6C2",
    "terminal.ansiBrightGreen":"#98C379",
    "terminal.ansiBrightMagenta":"#C678DD",
    "terminal.ansiBrightRed":"#E06C75",
    "terminal.ansiBrightWhite":"#C8CCD4",
    "terminal.ansiBrightYellow":"#E5C07B",
    "terminal.ansiCyan":"#56B6C2",
    "terminal.ansiGreen":"#98C379",
    "terminal.ansiMagenta":"#C678DD",
    "terminal.ansiRed":"#E06C75",
    "terminal.ansiWhite":"#ABB2BF",
    "terminal.ansiYellow":"#E5C07B"
  },
  "editor.mouseWheelZoom": true,
  // "editor.suggest.filteredTypes": {
    // "keyword": false // used this for OCaml, but is annoying with TypeScript since primitive types are registered as keywords, such that e.g. string gets corrected to String when typing ; or , with editor.acceptSuggestionOnCommitCharacter.
  // },
  // "reason.codelens.enabled": true,
  "macros": {
    "commentDown": [
        "editor.action.copyLinesDownAction",
        "cursorUp",
        "editor.action.addCommentLine",
        "cursorDown"
    ],
  },
  "vsicons.dontShowNewVersionMessage": true,
  "diffEditor.renderSideBySide": false,
  "typescript.updateImportsOnFileMove.enabled": "always",
  "gitlens.currentLine.scrollable": false,
  "gitlens.blame.ignoreWhitespace": true,
  "[html]": {
    "editor.defaultFormatter": "vscode.html-language-features"
  },
  "[javascript]": {
    "editor.defaultFormatter": "vscode.typescript-language-features"
  },
  "[json]": {
    "editor.defaultFormatter": "vscode.json-language-features"
  },
  "[ocaml]": {
    "editor.language.brackets": [
        ["[", "]"],
        ["(", ")"],
        ["then", "else"], // TODO wrong if there's an inner if w/o else
        ["struct", "end"],
        ["sig", "end"],
        ["let", "in"],
        ["let rec", "and"],
        ["and", "and"],
        ["and", "in"],
    ],
    "editor.language.colorizedBracketPairs": [
        ["(", ")"]
    ]
},
  "latex-workshop.view.pdf.viewer": "tab",
  "latex-workshop.intellisense.package.enabled": true,
  "latex-workshop.linting.chktex.enabled": true,
  "latex-workshop.view.pdf.tab.editorGroup": "left",
  "problems.showCurrentInStatus": true,
  "spellright.notificationClass": "warning",
  "spellright.language": ["en", "de"],
  "latex-utilities.message.update.show": false,
  "editor.acceptSuggestionOnEnter": "off",
  "git.smartCommitChanges": "tracked",
  "workbench.sideBar.location": "right",
  "latex-workshop.view.pdf.zoom": "page-width",
  "explorer.confirmDragAndDrop": false,
  "workbench.editor.wrapTabs": true,
  "editor.glyphMargin": false,
  "security.workspace.trust.untrustedFiles": "open",
  "workbench.editor.highlightModifiedTabs": true,
  "editor.renderWhitespace": "trailing",
  "editor.renderLineHighlight": "gutter",
  "editor.occurrencesHighlight": true,
  // "auto-build.defaultEnv.name": "mega2560", // Marlin env for MKS Gen L in Artillery Genius
  "editor.guides.bracketPairs": true,
  "editor.bracketPairColorization.enabled": true,
  "editor.suggestSelection": "recentlyUsedByPrefix",
  "vsintellicode.modify.editor.suggestSelection": "automaticallyOverrodeDefaultValue",
  "quokka.showStartViewOnFeatureRelease": false,
  "window.titleBarStyle": "custom",
  "editor.stickyScroll.enabled": true,
  "editor.stickyTabStops": true,
  "editor.suggest.matchOnWordStartOnly": false,
  "editor.smoothScrolling": true,
  "terminal.integrated.smoothScrolling": true,
  "workbench.list.smoothScrolling": true,
  "workbench.editor.scrollToSwitchTabs": true,
  "editor.experimental.pasteActions.enabled": true,
  "ipynb.experimental.pasteImages.enabled": true,
  "markdown.validate.enabled": true,
  "markdown.updateLinksOnFileMove.enabled": "prompt",
  "window.commandCenter": true,
  "editor.quickSuggestions": {
    "other": "inline",
    "comments": "inline",
    "strings": "inline"
  },
  "git.untrackedChanges": "separate",
  "javascript.format.semicolons": "insert",
  "typescript.format.semicolons": "insert",
  "github.copilot.enable": {
    "*": false,
    "yaml": false,
    "plaintext": false,
    "markdown": false
  },
  "editor.formatOnPaste": true,
  "[python]": {
    "editor.formatOnType": true
  },
  "typescript.suggest.completeFunctionCalls": true,
  "javascript.suggest.completeFunctionCalls": true,
  "editor.snippetSuggestions": "bottom",
  "emmet.showSuggestionsAsSnippets": true
}
