# $ tmux show-options -g
set -g mouse on

set -g base-index 1
set -g repeat-time 1000

set -g status-bg black
set -g status-fg white
set -g status-justify left
set -g status-interval 1
set -g status-left-length 15
set -g status-right-length 55
# set -g status-left "#[fg=white,bg=blue] #S #[fg=blue,bg=black]#[default]" # session-name
set -g status-left ''
# set -g status-right "#[fg=yellow] %Y-%m-%d #[fg=green]%H:%M:%S#[default]"
set -g status-right "#[fg=green]%H:%M:%S#[default]"

# $ tmux show-window-options -g
# configuration for each window.
# setw -g window-status-format " #I  #W "
setw -g window-status-format " #I:#W "
# setw -g window-status-current-format " #I #[fg=green,bg=black] #W "
setw -g window-status-current-format " #I:#W "
setw -g window-status-current-style bg=green,fg=white

# rename windows to something more useful than the running program (often just zsh)
# https://that.guru/blog/automatically-set-tmux-window-name/
# set-option -g allow-rename on # this allows zsh to rename via PROMPT_COMMAND
set-option -g automatic-rename on
# set-option -g automatic-rename-format '#{b:pane_current_path}:#{pane_current_command}'
# above is fine but we want just ~ instead of pi:zsh (always hide :zsh)
# user="#(whoami)" # somehow this isn't executed, #{user} will just be #(whoami)
set-option -g automatic-rename-format '#{?#{==:#{b:pane_current_path},#(whoami)},~,#{b:pane_current_path}}#{?#{==:#{pane_current_command},zsh},,:#{pane_current_command}}'

## Use ` for renaming the window with a prompt.
unbind ','
bind ` command-prompt -I '#W' "rename-window '%%'"

# keep sessions running after detach
set-option -g destroy-unattached off

# TPM plugins
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'
# set -g default-terminal "screen-256color"
# set -g terminal-overrides 'xterm:colors=256'
# set -g history-limit 50000
# set -g display-time 4000
# set -sg escape-time 0
# bind R source-file ~/.tmux.conf
set -g @plugin 'tmux-plugins/tmux-pain-control'
# unbind %
# unbind '"'
# bind v split-window -h -c '#{pane_current_path}'
# bind | split-window -h -c '#{pane_current_path}'
# bind h split-window -v -c '#{pane_current_path}'
# bind - split-window -v -c '#{pane_current_path}'
# bind c new-window -c '#{pane_current_path}'
set -g @plugin 'tmux-plugins/tmux-open'
set -g @plugin 'tmux-plugins/tmux-yank'
set -g @plugin 'tmux-plugins/tmux-copycat'
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @resurrect-capture-pane-contents 'on'
# set -g @resurrect-save-shell-history 'on' # this somehow breaks the above (pane-contents)
# 1. If a Session.vim file exists in a directory, the following option will make Obsession.vim load that file. 2. If a file was opened via `v foo` and there's no Session.vim, that command will just be executed again.
# Problems: With 2, files opened from within vim won't be reopened. Using 1 and 2 together in the same directory will load the session twice instead of doing 1 and 2 separately.
set -g @resurrect-strategy-vim 'session'
set -g @resurrect-strategy-nvim 'session'
set -g @plugin 'tmux-plugins/tmux-continuum'
set -g @continuum-restore 'on'
set -g @continuum-save-interval '30' # Default is 15min. Only important in case the whole system crashes. Better to hit ctrl-b ctrl-s before reboot to be sure to save the up-to-date environment (instead of setting this to 1 and polluting ~/.tmux/resurrect/).
# set -g @plugin 'tmux-plugins/tmux-sessionist' # use just one session for now
set -g @plugin 'tmux-plugins/tmux-logging'

# https://github.com/tmux-plugins/tpm/blob/master/docs/automatic_tpm_installation.md
# somehow install_plugins didn't work this way; also done in install.sh
if "test ! -d ~/.tmux/plugins/tpm" \
   "run 'git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm && ~/.tmux/plugins/tpm/bin/install_plugins'"

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run '~/.tmux/plugins/tpm/tpm'
